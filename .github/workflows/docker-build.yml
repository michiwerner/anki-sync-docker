name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  LATEST_ANKI_VERSION: 25.02.4  # Update this when new Anki versions are released

jobs:
  build-amd64-main:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set Anki version
        id: anki_version
        run: |
          echo "Using latest Anki version $LATEST_ANKI_VERSION"
          echo "version=$LATEST_ANKI_VERSION" >> $GITHUB_OUTPUT
      - name: Build Docker image (amd64, no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          build-args: |
            ANKI_VERSION=${{ steps.anki_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-push-amd64-tag:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Anki version
        id: anki_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Using Anki version $VERSION from tag"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Check if this is the latest Anki version
        id: is_latest
        run: |
          if [ "${{ steps.anki_version.outputs.version }}" = "${{ env.LATEST_ANKI_VERSION }}" ]; then
            echo "latest=true" >> $GITHUB_OUTPUT
          else
            echo "latest=false" >> $GITHUB_OUTPUT
          fi
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=raw,value=latest,enable=${{ steps.is_latest.outputs.latest }}
      - name: Build and push Docker image (amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ANKI_VERSION=${{ steps.anki_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-push-arm64-tag:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Anki version
        id: anki_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Using Anki version $VERSION from tag"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Check if this is the latest Anki version
        id: is_latest
        run: |
          if [ "${{ steps.anki_version.outputs.version }}" = "${{ env.LATEST_ANKI_VERSION }}" ]; then
            echo "latest=true" >> $GITHUB_OUTPUT
          else
            echo "latest=false" >> $GITHUB_OUTPUT
          fi
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=raw,value=latest,enable=${{ steps.is_latest.outputs.latest }}
      - name: Build and push Docker image (arm64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ANKI_VERSION=${{ steps.anki_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-amd64-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set Anki version
        id: anki_version
        run: |
          echo "Using latest Anki version $LATEST_ANKI_VERSION"
          echo "version=$LATEST_ANKI_VERSION" >> $GITHUB_OUTPUT
      - name: Build Docker image (amd64, no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          build-args: |
            ANKI_VERSION=${{ steps.anki_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

