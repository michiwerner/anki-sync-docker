name: Build and Push Docker Image

on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  LATEST_ANKI_VERSION: 25.09  # Update this when new Anki versions are released

jobs:
  build_and_push:
    # Run for pushes to tags starting with v* OR pushes to any branch
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/'))
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            # GitHub's FREE ARM64 runners for public repositories (Public Preview)
            runner: ubuntu-24.04-arm
            # Alternative options:
            # runner: ubuntu-22.04-arm  # Older Ubuntu version
            # runner: blacksmith-2vcpu-ubuntu-2204-arm  # Blacksmith (third-party)
            # runner: runs-on-runner=2cpu-linux-arm64,run-id=${{ github.run_id }}  # RunsOn (third-party)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Remove QEMU setup - no longer needed with native runners
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3
      #   with:
      #     platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Anki version and tagging strategy
        id: anki_details
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tag push
            TAG_VERSION_CLEAN="${GITHUB_REF_NAME#v}" # Strip 'v' prefix, e.g., v25.09 -> 25.09
            ANKI_VERSION="$TAG_VERSION_CLEAN"
            IS_LATEST_TAG_ELIGIBLE="false"
            BUILD_TYPE="tag"

            echo "Event: Push to tag ${{ github.ref_name }}."
            echo "Anki version to build: $ANKI_VERSION (from tag)"

            if [ "$TAG_VERSION_CLEAN" == "${{ env.LATEST_ANKI_VERSION }}" ]; then
              IS_LATEST_TAG_ELIGIBLE="true"
              echo "This tag's version matches LATEST_ANKI_VERSION, so 'latest' tag will also be applied."
            else
              echo "This tag's version does not match LATEST_ANKI_VERSION."
            fi
            echo "anki_version=$ANKI_VERSION" >> $GITHUB_OUTPUT
            echo "is_latest_tag_eligible=$IS_LATEST_TAG_ELIGIBLE" >> $GITHUB_OUTPUT
            echo "tag_version_clean=$TAG_VERSION_CLEAN" >> $GITHUB_OUTPUT
            echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          else
            # Branch push
            BRANCH_NAME_SANITIZED=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
            ANKI_VERSION="${{ env.LATEST_ANKI_VERSION }}"
            BUILD_TYPE="branch"
            
            echo "Event: Push to branch ${{ github.ref_name }}."
            echo "Anki version to build: $ANKI_VERSION (latest)"
            echo "Sanitized branch name: $BRANCH_NAME_SANITIZED"
            
            echo "anki_version=$ANKI_VERSION" >> $GITHUB_OUTPUT
            echo "branch_name_sanitized=$BRANCH_NAME_SANITIZED" >> $GITHUB_OUTPUT
            echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          fi

      - name: Prepare image tags for platform
        id: image_tags
        run: |
          if [ "${{ steps.anki_details.outputs.build_type }}" == "tag" ]; then
            TAG_VERSION="${{ steps.anki_details.outputs.tag_version_clean }}"
            PLATFORM_TAG="${TAG_VERSION}-${{ matrix.platform }}"
          else
            # Branch build
            PLATFORM_TAG="branch-${{ steps.anki_details.outputs.branch_name_sanitized }}-${{ matrix.platform }}"
          fi
          TAGS_STRING="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${PLATFORM_TAG}"
          
          echo "tags=$TAGS_STRING" >> $GITHUB_OUTPUT

      - name: Build and push Docker image (native ${{ matrix.platform }})
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.platform }}
          push: true
          tags: ${{ steps.image_tags.outputs.tags }}
          build-args: |
            ANKI_VERSION=${{ steps.anki_details.outputs.anki_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  create_manifest:
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/'))
    runs-on: ubuntu-latest
    needs: build_and_push
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Anki version and tagging strategy
        id: anki_details
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # Tag push
            TAG_VERSION_CLEAN="${GITHUB_REF_NAME#v}" # Strip 'v' prefix, e.g., v25.09 -> 25.09
            ANKI_VERSION="$TAG_VERSION_CLEAN"
            IS_LATEST_TAG_ELIGIBLE="false"
            BUILD_TYPE="tag"

            if [ "$TAG_VERSION_CLEAN" == "${{ env.LATEST_ANKI_VERSION }}" ]; then
              IS_LATEST_TAG_ELIGIBLE="true"
            fi
            echo "anki_version=$ANKI_VERSION" >> $GITHUB_OUTPUT
            echo "is_latest_tag_eligible=$IS_LATEST_TAG_ELIGIBLE" >> $GITHUB_OUTPUT
            echo "tag_version_clean=$TAG_VERSION_CLEAN" >> $GITHUB_OUTPUT
            echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          else
            # Branch push
            BRANCH_NAME_SANITIZED=$(echo "${{ github.ref_name }}" | sed 's/\//-/g')
            ANKI_VERSION="${{ env.LATEST_ANKI_VERSION }}"
            BUILD_TYPE="branch"
            
            echo "anki_version=$ANKI_VERSION" >> $GITHUB_OUTPUT
            echo "branch_name_sanitized=$BRANCH_NAME_SANITIZED" >> $GITHUB_OUTPUT
            echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          fi

      - name: Prepare final image tags
        id: final_tags
        run: |
          if [ "${{ steps.anki_details.outputs.build_type }}" == "tag" ]; then
            TAG_VERSION="${{ steps.anki_details.outputs.tag_version_clean }}"
            TAGS_STRING="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_VERSION}"
            if [ "${{ steps.anki_details.outputs.is_latest_tag_eligible }}" == "true" ]; then
              TAGS_STRING="$TAGS_STRING,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            fi
          else
            # Branch build
            BRANCH_TAG="branch-${{ steps.anki_details.outputs.branch_name_sanitized }}"
            TAGS_STRING="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH_TAG}"
          fi
          echo "tags=$TAGS_STRING" >> $GITHUB_OUTPUT

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # Validate that digest files exist and are non-empty
          if [ ! "$(ls -A .)" ]; then
            echo "Error: No digest files found in /tmp/digests"
            exit 1
          fi
          
          # Build the image references from digest files, with validation
          image_refs=""
          for digest_file in *; do
            if [ -f "$digest_file" ]; then
              digest="sha256:$digest_file"
              image_ref="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@$digest"
              image_refs="$image_refs $image_ref"
            else
              echo "Warning: Skipping non-file: $digest_file"
            fi
          done
          
          if [ -z "$image_refs" ]; then
            echo "Error: No valid digest files found"
            exit 1
          fi
          
          echo "Creating manifest with images: $image_refs"
          
          # Use docker buildx imagetools create with explicit image references
          docker buildx imagetools create \
            $(echo "${{ steps.final_tags.outputs.tags }}" | sed 's/,/ --tag /g' | sed 's/^/--tag /') \
            $image_refs

  build_other:
    # Only handles pull_requests now
    if: github.event_name == 'pull_request'
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runner: ubuntu-latest
          - platform: arm64
            # GitHub's FREE ARM64 runners for public repositories (Public Preview)
            runner: ubuntu-24.04-arm
            # Alternative options:
            # runner: ubuntu-22.04-arm  # Older Ubuntu version
            # runner: blacksmith-2vcpu-ubuntu-2204-arm  # Blacksmith (third-party)
            # runner: runs-on-runner=2cpu-linux-arm64,run-id=${{ github.run_id }}  # RunsOn (third-party)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Set Anki version for this build
        id: anki_version_other
        run: |
          echo "Using latest Anki version ${{ env.LATEST_ANKI_VERSION }} for this build."
          echo "version=${{ env.LATEST_ANKI_VERSION }}" >> $GITHUB_OUTPUT

      - name: Prepare local build tag
        id: local_build_tag
        run: |
          TAG_VALUE_PREFIX="pr-${{ github.event.number }}"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG_VALUE_PREFIX}-${SHORT_SHA}-${{ matrix.platform }}" >> $GITHUB_OUTPUT

      - name: Build Docker image (native ${{ matrix.platform }}, no push)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/${{ matrix.platform }}
          push: false
          tags: ${{ steps.local_build_tag.outputs.tag }}
          build-args: |
            ANKI_VERSION=${{ steps.anki_version_other.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
